[
  {
    "id": "awareness",
    "title": "Multi Service With Cloud Self Awareness",
    "description": "Kick off with a service oriented architecture that has self awareness among your services. Improve performance and allow your application to scale by distributing your services.",
    "rightImage": true,
    "imageLocation": "images/features/awareness.png",
    "fullDescription": "<p>SOAJS gives you out of the box a service oriented architecture with self awareness among your services.<br />These services are distributed over the cloud improving the performance of your application and optimizing your infrastructure cost.<br/><br /> Additional compute can be added allowing both scalability and growth. Existing services become aware of these new nodes making the application modular and self aware as well. If a service is down, the cloud will know and will remain functional and reliable.</p>",
    "icon": "images/homepage/awareness.png"
  },
  {
    "id": "pec",
    "title": "Multi project, environment and configuration",
    "description": "Build & deploy and run on the same infrastructure multiple projects with different environments and configuration without any collision. Enjoy the power of an abstracted infrastructure.",
    "leftImage": true,
    "imageLocation": "images/features/multi-env-proj-conf.png",
    "fullDescription": "<p>Take advantage of multi environment capability and build development, staging, and production environments. Enjoy the power and ease of configuring each environment from an infrastructure perspective including different devOps and techOps appetites.<br /><br />Have the ability to create and deploy multiple projects on top of these environments without any collision. SOAJS helps you optimize your infrastructure cost and provides you with reusability capability infrastructure wise among your multiple projects.</p>",
    "icon": "images/homepage/multi-proj-conf-env.png"
  },
  {
    "id": "imfv",
    "title": "Input Mapping Formatting & Validation (IMFV)",
    "description": "Map, format and validate the APIs inputs from different sources with fallback and default values. IMFV supports a huge variety and combination of formatter and validation that helps you take away around 50% of your API code with just one configuration file.",
    "rightImage": true,
    "imageLocation": "images/features/imfv.png",
    "fullDescription": "<p>More than 50% of your API code is to collect, format, and validate the passed parameters from different sources (query, body, header, cookies, session, local config, and tenant or user specific service config &hellip;).<br />IMFV does it all for you; a simple json configuration and you are done. <br />IMFV is based on json schema, supports multiple sources with priority, and default values.</p><ul class=\"std-list\"><li>Multi type (string, number, regex, object, array, boolean)</li><li>Multi format (email, phone, date, time, alphanumeric, domain, uri, color, route ...)</li><li>Complex schema (objects, arrays, sub-objects, arrays of objects, objects with arrays... )</li><li>Custom format, types and schemas</li></ul>",
    "icon": "images/homepage/imfv.png"
  },
  {
    "id": "security",
    "title": "Security",
    "description": "SOAJS empowers you to secure your services with oAuth in addition to multitenant application key that can be controlled by device and geo location security as well as expiration date.",
    "leftImage": true,
    "imageLocation": "images/features/security.png",
    "fullDescription": "<p>SOAJS offers two security mechanisms to protect your apis from outside and unwanted access:<ul class=\"std-list\"><li>API access can be protected using <a href=\"http://oauth.net/2/\">oAuth 2.0</a>. Requests that do not dispose of the correct authorization are blocked and do not get forwarded to the service.<br /><br /></li><li>API access can also be protected by tenant keys; if a key is not provided, the API is inaccessible.<br />Keys are secured by expiration dates, device access restrictions and geo location access restrictions. The tenant key allows you to control the security by tenant down to the user.</li></ul>",
    "icon": "images/homepage/security.png"
  },
  {
    "id": "tenantsProducts",
    "title": "Multitenancy & productization",
    "description": "Productize and package your services' APIs with different access level permissions, rules, and configuration. Create multiple tenants and relate your productized services with those tenants.",
    "rightImage": true,
    "imageLocation": "images/features/productization-multitenant3.png",
    "fullDescription": "<p>Productize and Package your servicess APIs with different access controls, rules and configuration. <br />Now that your services are productized, sell these products to different clients.</p><p>Create multiple tenants and associate applications to these tenants as well as provide different services' APIs, access controls and configuration per key. Tenants use different products and products are used by different tenants. This two way binding saves you lots of effort should you need to offer the same service to different clients with different customization.</p><p>Tenants Applications can override the Access Levels of Packages if needed (1 - 2).</p>",
    "icon": "images/homepage/multi-tenant-productization.png"
  },
  {
    "id": "urac",
    "title": "URAC",
    "description": "SOAJS comes with a User Registration & Access Control (URAC) service that empowers you to provide user driven API access control as well as configuration. In addition URAC is a full user/group records management equipped with advanced notification system.",
    "leftImage": true,
    "imageLocation": "images/features/urac.png",
    "fullDescription": "<p>SOAJS comes with a User Registration &amp; Access Control (URAC) service that manages users' accounts for different tenants. This service empowers you to provide user driven API access control as well as configuration. URAC is also equipped with an advanced notification system and template options.</p><p>The URAC also provides the ability to override the service access level as well as configuration for specific users regarding product packages and tenants applications (1 - 2 - 3 - 4).</p>",
    "icon": "images/homepage/urac.png"
  },
  {
    "id": "dashboard",
    "title": "Admin & maintenance dashboard",
    "description": "SOAJS comes with a dashboard that empowers you to manage the productization, multitenancy and configuration as well as monitor and control your services and environments. SOAJS has an agent that runs on each compute and provides the needed analytic to the dashboard and logs to elasticsearch.",
    "fullDescription": "<p>SOAJS comes with a dashboard that empowers you to manage the productization, multitenancy and configuration as well as monitor and control your services and environments.</p><p>SOAJS Agent sends services topology (installed SAOJS services as well as packages versions), the OS, Input/Output, network analytic information to the dashboard. The agent also triggers the maintenance operations for all services, collects all logs and forwards them to elasticsearch. The Agent sends services log analytic to elasticsearch and maintains self awareness among services.</p><p>Service Maintenance Port provides the ability to reload environment registry configuration, productization and multitenant configuration and performs heartbeat and functional checks on services.</p>",
    "icon": "images/homepage/admin-dashboard.png"
  }
]
